import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;
  String get actionSettings => "Edit Death Day";
  String get appName => "Death Day";
  String get appSplashName => "Death Day";
  String get desireListSettings => "Editing wishes";
  String get futureTooMsg => "Left";
  String get imageSettings => "Set Background";
  String get indexDay => "D";
  String get indexDay2 => "D";
  String get indexFuture => "Future";
  String get indexMiss => "Ｗoman";
  String get indexMonth => "M ";
  String get indexMr => "Man";
  String get indexPast => "Past";
  String get indexTitleMsg => "Life left";
  String get indexYear => "Y";
  String get loginBtn => "E-mail Login/Join";
  String get loginEditMailHint => "Enter an email";
  String get loginEditPasswordHint => "Enter password";
  String get loginLostPassword => "Forget password";
  String get loginMsg => "User, please login";
  String get loginTextCheck => "Save account";
  String get loginTitle => "Login";
  String get logoutTitle => "Logout";
  String get newUserErrorToastMsg1 => "Please enter information";
  String get noLoginBtn => "Experience";
  String get pastAimsDay => "Date：";
  String get pastTooMsg => "Past";
  String get toastMsgError => "Past";
  String get toastMsgError2 => "Remaining";
  String get toastNoLogin => "Currently for the experience, only one can be added in the past/future";
  String get toastYearError => "Less than a year";
  String get userLifePush => "Life";
}

class zh_TW extends S {
  const zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get indexFuture => "未來";
  @override
  String get indexMr => "男";
  @override
  String get pastAimsDay => "目標日：";
  @override
  String get indexMonth => "月 ";
  @override
  String get loginMsg => "曾經加入過的用戶，請登入";
  @override
  String get userLifePush => "您的壽命";
  @override
  String get indexYear => "年";
  @override
  String get pastTooMsg => "過";
  @override
  String get appSplashName => "Death Day";
  @override
  String get logoutTitle => "會員登出";
  @override
  String get loginEditMailHint => "請輸入電子郵件";
  @override
  String get loginLostPassword => "忘記密碼";
  @override
  String get indexPast => "過去";
  @override
  String get loginTitle => "會員登入";
  @override
  String get indexDay => "日";
  @override
  String get indexDay2 => "天";
  @override
  String get toastMsgError2 => "剩下";
  @override
  String get indexTitleMsg => "您的壽命剩餘";
  @override
  String get newUserErrorToastMsg1 => "該使用者尚未輸入資料";
  @override
  String get loginBtn => "E-mail登入/註冊";
  @override
  String get appName => "人生倒數計時器";
  @override
  String get actionSettings => "編輯人生倒數";
  @override
  String get desireListSettings => "編輯願望";
  @override
  String get imageSettings => "編輯背景";
  @override
  String get futureTooMsg => "剩";
  @override
  String get toastYearError => "目前未滿一年";
  @override
  String get noLoginBtn => "體驗試用";
  @override
  String get loginTextCheck => "記住帳號";
  @override
  String get toastNoLogin => "您目前為試用狀態，過去/未來只能新增一組，是否需要登入？";
  @override
  String get indexMiss => "女";
  @override
  String get loginEditPasswordHint => "請輸入密碼";
  @override
  String get toastMsgError => "過了";
}

class en extends S {
  const en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "TW"),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported);
    };
  }

  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported) {
    if (locale == null || !isSupported(locale)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_TW":
          return SynchronousFuture<S>(const zh_TW());
        case "en":
          return SynchronousFuture<S>(const en());
        default:
        // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) =>
      locale != null && supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
